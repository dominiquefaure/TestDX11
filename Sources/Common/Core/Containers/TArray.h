#ifndef __CORE_CONTAINERS_ARRAY_H__
#define __CORE_CONTAINERS_ARRAY_H__

#include <vector>
#include <assert.h>

template<typename T> class TArray
{

public:

	//-------------------------------------------------------------------------------------------------
	TArray()
	{
	}
	//-------------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------------
	~TArray()
	{
	}
	//-------------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------------
	FORCE_INLINE TUint32 Count()const
	{
		return m_items.count();
	}
	//-------------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------------
	FORCE_INLINE T& operator[]( TUint32 a_index )
	{
		CheckRange( a_index );

		return m_items[ a_index ];
	}
	//-------------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------------
	/*
	* Add a new Item to the Array
	*/
	FORCE_INLINE void Add( T a_value )
	{
		m_items.push_back( a_value );
	}
	//-------------------------------------------------------------------------------------------------

// Methods
private:

	//-------------------------------------------------------------------------------------------------
	/*
	* Validate the range is valid
	*/
	FORCE_INLINE void CheckRange( TUint32 a_index )
	{
	//	assert( ( ( a_index >= 0 ) && ( a_index <m_items.count() ) ) , "Index out of Range" );
	}
	//-------------------------------------------------------------------------------------------------

private:

	// Vectgor that store the different items
	std::vector<T>	m_items;
};

#endif
