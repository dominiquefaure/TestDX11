#ifndef __CORE_CONTAINERS_FIXED_ARRAY_H__
#define __CORE_CONTAINERS_FIXED_ARRAY_H__

#include "Core/CoreIncludes.h"


template<typename T> class TFixedArray
{

public:

	//-------------------------------------------------------------------------------------------------
	TFixedArray()
	{
		m_count												=	0;
		m_elements											=	nullptr;
	}
	//-------------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------------
	~TFixedArray()
	{
		Free();
	}
	//-------------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------------
	inline TUint32 Count()const
	{
		return m_count;
	}
	//-------------------------------------------------------------------------------------------------


	//-------------------------------------------------------------------------------------------------
	/*
	* Allocate the Array
	*/
	inline void Allocate( TUint32 a_count )
	{
		m_count												=	a_count;
		m_elements											=	new T[ a_count ];
	}
	//-------------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------------
	/*
	* Free the Allocated data
	*/
	inline void Free()
	{
		SAFE_DELETE_ARRAY( m_elements );
		m_count												=	0;
	}
	//-------------------------------------------------------------------------------------------------


	//-------------------------------------------------------------------------------------------------
	T& operator[]( int a_index )
	{
		return m_elements[ a_index ];
	}
	//-------------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------------
	const T& operator[]( int a_index )const
	{
		return m_elements[ a_index ];
	}
	//-------------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------------
	const T* GetBuffer()const
	{
		return m_elements;
	}
	//-------------------------------------------------------------------------------------------------

private:

	// number of Elements presents in the Array
	TUint32	m_count;

	// Array of elements of the Template type
	T*		m_elements;
};

#endif