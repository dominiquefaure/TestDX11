/*
* Implementation of the Inline methods of Vector3F
*/

#include "Maths.h"


#define VECTOR3F_NORMALIZED_CHECK_TOLERANCE	0.1f


//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F::Vector3F()
{
	x														=	0;
	y														=	0;
	z														=	0;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F::Vector3F( float a_value )
{
	x														=	a_value;
	y														=	a_value;
	z														=	a_value;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F::Vector3F( float a_x , float a_y , float a_z )
{
	x														=	a_x;
	y														=	a_y;
	z														=	a_z;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE float Vector3F::Dot( const Vector3F& a_v1 , const Vector3F& a_v2 )
{
	return a_v1.Dot( a_v2 );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE float Vector3F::Dot( const Vector3F& a_vector )const
{
	return ( ( x * a_vector.x ) +  ( y * a_vector.y ) +  ( z * a_vector.z ) );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::Cross(  const Vector3F& a_v1 , const Vector3F& a_v2 )
{
	return a_v1.Cross( a_v2 );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::Cross( const Vector3F& a_vector )const
{
	return Vector3F( ( ( y * a_vector.z ) - ( z * a_vector.y ) ),
					 ( ( z * a_vector.x ) - ( x * a_vector.z ) ),
					 ( ( x * a_vector.y ) - ( y * a_vector.x ) ) );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE void Vector3F::Set( float a_x , float a_y , float a_z )
{
	x														=	a_x;
	y														=	a_y;
	z														=	a_z;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE float Vector3F::GetLength()const
{
	return sqrtf( ( x * x ) + ( y* y ) + ( z * z ) );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE float Vector3F::GetSquaredLength()const
{
	return ( ( x * x ) + ( y* y ) + ( z * z ) );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE bool Vector3F::Normalize( float a_tolerance )
{
	float t_squareValue										=	GetSquaredLength();

	// if already normalized do nothing
	if( t_squareValue == 1.0f )
	{
		return true;
	}

	if( t_squareValue > a_tolerance )
	{
		//compute the inverse square
		float t_scale										=	1.0f / sqrtf( t_squareValue );

		x													*=	t_scale;
		y													*=	t_scale;
		z													*=	t_scale;

		return true;
	}
	else
	{
		// force to 0
		Set( 0 , 0 , 0 );
		return false;
	}
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::GetNormalized()const
{
	Vector3F t_result( *this );

	t_result.Normalize();

	return t_result;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE bool Vector3F::IsNormalized()const
{
	return ( Maths::Abs( 1.0f - GetSquaredLength() ) <= VECTOR3F_NORMALIZED_CHECK_TOLERANCE );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE bool Vector3F::IsZero()const
{
	return ( ( x == 0.0f ) && ( y == 0.0f ) && ( z == 0.0f ) );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE bool Vector3F::IsAlmostZero( float a_tolerance )
{
	return( ( Maths::Abs( x ) <= a_tolerance ) && 
			( Maths::Abs( y ) <= a_tolerance ) &&
			( Maths::Abs( z ) <= a_tolerance ) );

}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE bool Vector3F::Equals( const Vector3F& a_vector , float a_tolerance )const
{
	return( ( Maths::Abs( x - a_vector.x ) <= a_tolerance ) && 
			( Maths::Abs( y - a_vector.y ) <= a_tolerance ) &&
			( Maths::Abs( z - a_vector.z ) <= a_tolerance ) );
}
//----------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator+( const Vector3F& a_vector )const
{
	return Vector3F(	x + a_vector.x ,
						y + a_vector.y ,
						z + a_vector.z );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator+( float a_value )const
{
	return Vector3F(	x + a_value ,
						y + a_value ,
						z + a_value );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator-( const Vector3F& a_vector )const
{
	return Vector3F(	x - a_vector.x ,
						y - a_vector.y ,
						z - a_vector.z );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator-( float a_value )const
{
	return Vector3F(	x - a_value ,
						y - a_value ,
						z - a_value );

}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator-()const
{
	return Vector3F( -x , -y , -z );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator*( const Vector3F& a_vector )const
{
	return Vector3F(	x * a_vector.x ,
						y * a_vector.y ,
						z * a_vector.z );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator*( float a_scale )const
{
	return Vector3F(	x * a_scale ,
						y * a_scale ,
						z * a_scale );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator/( const Vector3F& a_vector )const
{
	return Vector3F(	x / a_vector.x ,
						y / a_vector.y ,
						z / a_vector.z );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator/( float a_scale )const
{
	const float t_scale										=	1.0f / a_scale;

	return Vector3F(	x * t_scale ,
						y * t_scale ,
						z * t_scale );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator+=( const Vector3F& a_vector )
{
	x														+=	a_vector.x;
	y														+=	a_vector.y;
	z														+=	a_vector.z;

	return *this;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator-=( const Vector3F& a_vector )
{
	x														-=	a_vector.x;
	y														-=	a_vector.y;
	z														-=	a_vector.z;

	return *this;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator*=( const Vector3F& a_vector )
{
	x														*=	a_vector.x;
	y														*=	a_vector.y;
	z														*=	a_vector.z;

	return *this;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator*=( float a_scale )
{
	x														*=	a_scale;
	y														*=	a_scale;
	z														*=	a_scale;

	return *this;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator/=( const Vector3F& a_vector )
{
	x														/=	a_vector.x;
	y														/=	a_vector.y;
	z														*=	a_vector.z;

	return *this;
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE Vector3F Vector3F::operator/=( float a_scale )
{
	const float t_scale										=	1.0f / a_scale;

	x														*=	t_scale;
	y														*=	t_scale;
	z														*=	t_scale;

	return *this;

}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE bool Vector3F::operator==( const Vector3F& a_vector )const
{
	return ( ( x == a_vector.x ) && ( y == a_vector.y ) && ( z == a_vector.z ) );
}
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
FORCE_INLINE bool Vector3F::operator!=( const Vector3F& a_vector )const
{
	return ( ( x != a_vector.x ) || ( y != a_vector.y ) || ( z != a_vector.z ) );
}
//----------------------------------------------------------------------------------------------------


